# 文件名: step2a_aspect_analysis.py
# 描述: 读取情感分数，进行方面分析，并将结果保存到Excel文件中。

import pandas as pd
import os

# --- 配置区 ---
INPUT_FILE_PATH = 'results/sentiment_scores.xlsx'
OUTPUT_FILE_PATH = 'results/final_data_with_aspects.xlsx' # 中间文件名简化

# 【重要】确保这里的列名与你项目流程中的标准名称一致
COMMENT_COLUMN = 'cleaned_text' 
PLATFORM_COLUMN = 'platform'

# --- 方面词典 (用于归因) ---
ASPECT_LEXICONS_V4_5 = {
    "表演-技巧呈现": ["技术", "功底", "功夫", "步法", "高桩", "采青", "师傅", "基本功", "难度", "力量", "动作", "身法", "稳", "弹跳", "腰马合一", "下盘", "专业", "教科书", "细节", "手艺", "技艺", "水平", "操作", "流畅", "干净利落", "行云流水", "失误", "瑕疵", "拉胯", "僵硬", "不稳", "拉了", r"动作.*流畅", r"跳得.*高", r"踩得.*稳", r"这.*(技术|功夫|水平)"],
    "表演-团队协作": ["默契", "配合", "同步", "搭档", "团队", "齐", "一致", "天衣无缝", "整齐划一", "协作", "协调"],
    "表演-艺术表现力": ["好看", "帅", "飒", "酷", "服装", "狮头", "颜色", "道具", "造型", "配色", "质感", "审美", "威风凛凛", "虎虎生威", "神态", "眼神", "活灵活现", "栩栩如生", "灵动", "神韵", "气场", "张力", "颜值", "惊艳", "绝美", "Bling", "华丽", "精致", "点睛", "吐幅", "丑", "廉价", "塑料感", "土"],
    "表演-听觉体验": ["鼓点", "配乐", "BGM", "背景音乐", "节奏", "燃", "卡点", "锣鼓", "唢呐", "音效", "听觉", "激昂", "振奋", "上头", "战歌", "鼓声一响", "踩点", "鼓乐", "鼓王", "振聋发聩", "吵", "刺耳", "噪音"],
    "阐释-文化价值": ["文化", "传承", "自信", "DNA", "非遗", "传统", "内涵", "底蕴", "精髓", "根", "魂", "历史", "起源", "意义", "精神", "象征", "血脉", "老祖宗", "民族", "国家", "中华", "我们", "自己的", "刻在骨子里", "文化自信", "认同感", "瑰宝", "文化符号", "文化名片", "软实力", "形式主义", "作秀", "摆拍", "空洞"],
    "阐释-情感投射": ["感动", "泪目", "自豪", "震撼", "共鸣", "热血", "鸡皮疙瘩", "戳中", "破防", "骄傲", "燃起来了", "热泪盈眶", "肃然起敬", "起敬", "敬意", "头皮发麻", "respect", "awe", "泪奔", "燃爆", "炸裂", "敬畏"],
    "关联-传播与发展": ["文化输出", "出圈", "推广", "宣传", "走向世界", "发扬光大", "未来", "商业化", "创新", "申遗", "火", "流量", "破圈", "后继有人", "接班人", "传承人", "发扬", "保护", "产业化", "IP", "文创", "堪忧", "断层", "失传", "后继无人"],
    "关联-比较与联想": ["雄狮少年", "黄飞鸿", "电影", "动漫", "游戏", "小时候", "过年", "庙会", "回忆", "春晚", "跨年", "春节", "元宵", "舞龙", "南狮","北狮","功夫", "武术", "年味", "烟火气", "想起", "想到", "梦回", "爷青回", "既视感", r"比.*好看", r"像.*一样", r"让我想起"],
    "综合评价与互动": ["YYDS", "绝绝子", "封神", "牛", "强", "顶", "绝了", "神仙", "无敌", "yyds", "神作", "垃圾", "无语", "尬", "什么鬼", "看不懂", "不行", "什么玩意", "满分", "推荐", "必看", "收藏", "三连", "关注", "分享", "转发"]
}

def main():
    """
    主函数，执行方面分析和数据保存。
    """
    print("\n--- 启动【步骤2a】: 方面分析与数据处理 ---")
    
    # 检查输入文件是否存在
    if not os.path.exists(INPUT_FILE_PATH):
        print(f"  > 错误: 输入文件 '{INPUT_FILE_PATH}' 未找到。请先运行前面的步骤。")
        return

    # 读取数据
    df = pd.read_excel(INPUT_FILE_PATH)
    print(f"  > 已加载 {len(df)} 条带情感分数的评论。")
    
    # 进行方面归因
    print("  > 正在进行方面归因 (优先匹配逻辑)...")
    df['aspect'] = '综合讨论' # 默认分类
    # 从后往前遍历字典，确保“综合评价”等类别优先匹配
    for aspect, keywords in reversed(list(ASPECT_LEXICONS_V4_5.items())):
        regex_pattern = '|'.join(keywords)
        # 只在尚未分类的评论中进行匹配
        unclassified_mask = (df['aspect'] == '综合讨论')
        keyword_mask = df[COMMENT_COLUMN].astype(str).str.contains(regex_pattern, na=False)
        df.loc[unclassified_mask & keyword_mask, 'aspect'] = aspect

    print("\n  > 方面归因完成，各方面评论数量分布如下:")
    print(df['aspect'].value_counts())
    print("-" * 30)

    # 创建一个更宽泛的方面类别列
    df['aspect_category'] = df['aspect'].apply(lambda x: x.split('-')[0] if '-' in x else '综合')

    # 保存处理后的数据
    df.to_excel(OUTPUT_FILE_PATH, index=False)
    print(f"\n--- 步骤2a完成 ---")
    print(f"  > 包含方面分析的最终数据已保存至: '{OUTPUT_FILE_PATH}'")
    print("  > 下一步，请运行 step2b_generate_plot.py 来生成可视化图表。")

if __name__ == "__main__":
    main()